// FSfuelSwitch things ended with Monoprop
@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[#resourceNames[*;MonoPropellant]],!@MODULE[ModuleTankManager]]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  _internalResourceAmount = #$MODULE[FSfuelSwitch]/resourceAmounts$
  @_internalResourceAmount ^= :.*;:: // Here, the last one is Monopropellant
  _internalResourceVolume = #$_internalResourceAmount$
  @_internalResourceVolume *= 0.006173 // FS use weird monoprop=LF scale, so we use liquidfuel conversion rate from configurable containers, rounded up from 0.0061728395

  MODULE
  {
    name = ModuleTankManager
    Volume = #$../_internalResourceVolume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      name = LFO
      Volume = 100.0
    }
  }

  !MODULE[FSfuelSwitch] {}
}

// FSfuelSwitch things ended with Organics
@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[#resourceNames[*;Organics]],!@MODULE[ModuleTankManager]]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  _internalResourceAmount = #$MODULE[FSfuelSwitch]/resourceAmounts$
  @_internalResourceAmount ^= :.*;:: // Here, the last one is Organics
  _internalResourceVolume = #$_internalResourceAmount$
  @_internalResourceVolume *= 0.001 // conversion rate from Configurable Containers

  MODULE
  {
    name = ModuleTankManager
    Volume = #$../_internalResourceVolume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = Soil
      CurrentResource = Ore
      InitialAmount = 0.0
      Volume = 100.0
    }
  }

  !MODULE[FSfuelSwitch] {}
}

// Stop textures from bounded to fuel switch
@PART[*]:HAS[@MODULE[FStextureSwitch2]:HAS[#useFuelSwitchModule[true]]]:NEEDS[ConfigurableContainers]
{
  @MODULE[FStextureSwitch2],*
  {
    %useFuelSwitchModule = false
  }
}

// Convert Switchable Tanks to Tank manager
@PART[*]:HAS[@MODULE[ModuleSwitchableTank]]:AFTER[ConfigurableContainers]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  MODULE
  {
    name = ModuleTankManager
    Volume = #$../MODULE[ModuleSwitchableTank]/Volume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = #$../../MODULE[ModuleSwitchableTank]/TankType$
      CurrentResource = #$../../MODULE[ModuleSwitchableTank]/CurrentResource$
      InitialAmount = #$../../MODULE[ModuleSwitchableTank]/InitialAmount$
      Volume = 100.0
    }
  }

  !MODULE[ModuleSwitchableTank] {}
}

// Convert some pretty monoprop tank to tank manager
@PART[*]:HAS[@RESOURCE[MonoPropellant],#title[FL-R*]]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  MODULE
  {
    name = ModuleTankManager
    Volume = #$../RESOURCE[MonoPropellant]/maxAmount$
    @Volume *= 0.006173
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = LiquidChemicals
      CurrentResource = MonoPropellant
      InitialAmount = 1.0
      Volume = 100.0
    }
  }

  !RESOURCE[MonoPropellant] {}
}

// Convert all karbonite tanks to tank manager
@PART[*]:HAS[@RESOURCE[Karbonite]]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  MODULE
  {
    name = ModuleTankManager
    Volume = #$../RESOURCE[Karbonite]/maxAmount$
    @Volume *= 0.00111111111
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = LiquidChemicals
      CurrentResource = Karbonite
      InitialAmount = 1.0
      Volume = 100.0
    }
  }

  !RESOURCE[Karbonite] {}
}

// Convert all lithium tanks to tank manager
@PART[*]:HAS[@RESOURCE[Lithium]]:FOR[MettaConfig1]:NEEDS[ConfigurableContainers]
{
  MODULE
  {
    name = ModuleTankManager
    Volume = #$../RESOURCE[Lithium]/maxAmount$
    @Volume *= 0.00111111111
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = Metal
      CurrentResource = Lithium
      InitialAmount = 1.0
      Volume = 100.0
    }
  }

  !RESOURCE[Lithium] {}
}

// Convert B9's own part switch to tank manager
@PART[*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]],#manufacturer[Tetragon*]]:FOR[MettaConfig1]:AFTER[B9_Aerospace]:NEEDS[ConfigurableContainers]
{
  _internalResourceVolume = #$MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]]/baseVolume$
  @_internalResourceVolume *= 0.006173 // B9's volume mean LF amount, so we use liquidfuel conversion rate from configurable containers, rounded up from 0.0061728395

  MODULE
  {
    name = ModuleTankManager
    Volume = #$../_internalResourceVolume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = LiquidChemicals
      CurrentResource = LiquidFuel
      InitialAmount = 1.0
      Volume = 100.0
    }
  }

  !MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}
}

// Convert Mk4 system from B9 to use tank manager
@PART[*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*]],#manufacturer[K.V.?Roe*]]:FOR[MettaConfig1]:AFTER[MarkIVSystem]:NEEDS[ConfigurableContainers]
{
  _internalResourceVolume = #$MODULE[ModuleB9PartSwitch]/baseVolume$
  @_internalResourceVolume *= 0.006173 // B9's volume mean LF amount, so we use liquidfuel conversion rate from configurable containers, rounded up from 0.0061728395

  MODULE
  {
    name = ModuleTankManager
    Volume = #$../_internalResourceVolume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      name = LFO
      Volume = 100.0
    }
  }

  !MODULE[ModuleB9PartSwitch] {}
}

// Convert resource from CryoTanks mod to tank manager
// Originally, liquid hydrogen is defined in the configs as raw resources, then later mysteriously converted into switchable tanks
// So use the original resource to calculate conversion rate
@PART[*]:HAS[@RESOURCE[LqdHydrogen],#manufacturer[Argyle*]]:FOR[MettaConfig1]:AFTER[CryoTanks]:NEEDS[ConfigurableContainers]
{
  _aace = 15 // DEBUG
  _internalResourceVolume = #$RESOURCE[LqdHydrogen]/maxAmount$
  @_internalResourceVolume *= 0.0006

  MODULE
  {
    name = ModuleTankManager
    Volume = #$../_internalResourceVolume$
    DoCostPatch = True
    DoMassPatch = True
    TANK
    {
      TankType = CryoCooling
      CurrentResource = LqdHydrogen
      InitialAmount = 1.0
      Volume = 100.0
    }
  }
  !RESOURCE[LqdHydrogen] {}
}
